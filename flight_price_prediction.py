# -*- coding: utf-8 -*-
"""Flight Price Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XUpmHn0DgO_Puze0eWtyv8v3DjM3F4Ap
"""

import numpy as np
import pandas as pd

import plotly.express as px
import plotly.graph_objs as go
import matplotlib.pyplot as plt
import seaborn as sns
sns.set_style('ticks')
sns.set_palette("viridis")

from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split

from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics


import warnings
warnings.filterwarnings('ignore')

from google.colab import drive
drive.mount('/content/drive')

"""# ***Reading the File***"""

flights=pd.read_csv('/content/drive/MyDrive/Clean_Dataset.csv')

flights.head(10)

"""# ***Exploratory data analysis***"""

flights.info()

# Checking for null values in every column
flights.isnull().sum()

"""The dataset doesn't contain any null values"""

# Removing the 'Unnamed' column
flights = flights.drop('Unnamed: 0', axis = 1)

flights.head()

flights.describe()

"""# **Insights**

1.   The average duration of flights in the dataset is 11.2 and the maximum duration is 49.8 and the minimum duration is 0.8.
2.   The average days left of flights in the dataset is 26 and the maximum days left are 49 and the minimum days left are 1.
3.   The average price of flights in the dataset is 7425 and the maximum price are 123071 and the minimum price are 1105.






"""

flights.duplicated().sum()

pd.DataFrame({"Missing values (%)" : round(flights.isnull().sum()/len(flights), 2)})

for i in flights:
    print(i)
    print(flights[i].unique(), "\n")

"""We have checked above if there are any duplicated or missing values in the dataset or not. The dataset is clean and the values inside the features are also fine. Let's move forward.

# ***Univariate Analysis***
"""

fig=px.histogram(flights, x='airline', color='airline', color_discrete_sequence=px.colors.sequential.Viridis)
fig.update_layout(title_text='Count of different Airlines', xaxis_title='Airlines', yaxis_title='Count')
fig.show()

"""Most of the flights are from **'Vistara'** airlines"""

counts = flights['flight'].value_counts().nlargest(10)
top_flights = flights[flights['flight'].isin(counts.index)]
fig = px.histogram(top_flights, x='flight', color='flight', color_discrete_sequence=px.colors.sequential.Viridis)
fig.update_layout(title_text='Count of top 10 flights', xaxis_title='Flight', yaxis_title='Count')
fig.show()

flights.head()

flights['source_city'].unique()

px.histogram(flights,x='source_city',color='source_city',color_discrete_sequence=px.colors.sequential.Viridis)

px.histogram(flights, x='departure_time', color='departure_time', color_discrete_sequence=px.colors.sequential.Viridis)

"""**'Late_Night'** flights are very less as compared to other departure time"""

px.histogram(flights, x='stops', color='stops', color_discrete_sequence=px.colors.sequential.Viridis)

"""Most of the flights have **one stop**"""

px.histogram(flights, x='arrival_time', color='arrival_time', color_discrete_sequence=px.colors.sequential.Viridis)

"""**'Early_Morning' and 'Late_Night'** arrivals are very less"""

counts = flights['destination_city'].value_counts()
sorted_destination_city = counts.sort_values(ascending = False).index.tolist()
fig = px.histogram(flights, x='destination_city', color='destination_city', color_discrete_sequence=px.colors.sequential.Viridis, category_orders={"destination_city": sorted_destination_city})
fig.update_layout(title_text='Count of Destination City', xaxis_title='Destination City', yaxis_title='Count')
fig.show()

counts = flights['class'].value_counts()
sorted_class = counts.sort_values(ascending = False).index.tolist()
fig = px.histogram(flights, x='class', color='class', color_discrete_sequence=px.colors.sequential.Viridis, category_orders={"class": sorted_class})
fig.update_layout(title_text='Count of Class', xaxis_title='Class', yaxis_title='Count')
fig.show()

"""Economy class are 2x than Business class

# **Insights**

1.   Among all the airlines in the dataset, Vistara has the highest number of flights, while SpiceJet has the lowest.
2.   UK-706 is the most frequently flown flight among the top 10 flights, whereas UK-860 is the least flown.
3.   Delhi is the most popular source city for flights, while Chennai is the least popular.
4.   Early morning is the most common departure time among people, with only a few choosing late night departures.
5.   Majority of the flights have only one stop, while only a small number have 2 or more stops.
6.   The most common arrival time for people is at night, with only a few arriving late night.
7.  Mumbai is the most popular destination city for flights, while Chennai is the least popular.
8.  Economy class is the most preferred travel class, with Business class being less popular.

# ***Multivariate Analysis***

**Analysis according to duration**

***Q1. What is the average duration of each airline?***
"""

airline_duration = flights.groupby('airline').mean()['duration']
airline_duration

airline_duration = flights.groupby('airline')['duration'].mean().reset_index()
fig = px.bar(airline_duration, x='airline', y='duration', color='airline', color_discrete_sequence=px.colors.sequential.Viridis)
fig.update_layout(title_text='Avg duartion of each airline', xaxis_title='Airline', yaxis_title='Duration')
fig.show()

"""***What is the average duration of top 10 Flights?***"""

flight_duration = flights.groupby('flight').mean()['duration']
flight_duration

flight_duration = flights.groupby('flight').mean()['duration'].reset_index()
top10_flight_duration = flight_duration.nlargest(10, 'duration')
fig = px.bar(top10_flight_duration, x='flight', y='duration', color='flight', color_discrete_sequence=px.colors.sequential.Viridis)
fig.update_layout(title_text='Avg duration of top 10 flights', xaxis_title='Flight', yaxis_title='Duration')
fig.show()

"""### ***What is the average duration of each source city?***"""

flights.groupby('source_city').mean()['duration']

source_city_duration = flights.groupby('source_city')['duration'].mean().sort_values(ascending = False).reset_index()
fig = px.bar(source_city_duration, x = 'source_city', y = 'duration', color = 'source_city', color_discrete_sequence=px.colors.sequential.Viridis)
fig.update_layout(title_text='Avg duartion of each source city', xaxis_title='Source City', yaxis_title='Duration')
fig.show()

"""***What is the average duration of each departure time?***"""

flights.groupby('departure_time')['duration'].mean()

source_city_duration = flights.groupby('departure_time')['duration'].mean().sort_values(ascending = False).reset_index()
fig = px.bar(source_city_duration, x = 'departure_time', y = 'duration', color = 'departure_time', color_discrete_sequence=px.colors.sequential.Viridis)
fig.update_layout(title_text='Avg duartion of each departure time', xaxis_title='Departure Time', yaxis_title='Duration')
fig.show()

"""***What is the average duration of each stop?***"""

flights.groupby('stops')['duration'].mean()

source_city_duration = flights.groupby('stops')['duration'].mean().reset_index()
fig = px.bar(source_city_duration, x = 'stops', y = 'duration', color = 'stops', color_discrete_sequence=px.colors.sequential.Viridis)
fig.update_layout(title_text='Avg duartion of each stop', xaxis_title='Stop', yaxis_title='Duration')
fig.show()

"""***What is the average duration of each arrival time?***"""

flights.groupby('arrival_time')['duration'].mean()

source_city_duration = flights.groupby('arrival_time')['duration'].mean().reset_index()
fig = px.bar(source_city_duration, x = 'arrival_time', y = 'duration', color = 'arrival_time', color_discrete_sequence=px.colors.sequential.Viridis)
fig.update_layout(title_text='Avg duartion of each arrival time', xaxis_title='Arrival Time', yaxis_title='Duration')
fig.show()

"""***What is the average duration of each destination city?***"""

flights.groupby('destination_city')['duration'].mean()

source_city_duration = flights.groupby('destination_city')['duration'].mean().reset_index()
fig = px.bar(source_city_duration, x = 'destination_city', y = 'duration', color = 'destination_city', color_discrete_sequence=px.colors.sequential.Viridis)
fig.update_layout(title_text='Avg duartion of each destination city', xaxis_title='Destination City', yaxis_title='Duration')
fig.show()

"""***What is the average duration of each class?***"""

flights.groupby('class')['duration'].mean()

source_city_duration = flights.groupby('class')['duration'].mean().sort_values(ascending = False).reset_index()
fig = px.bar(source_city_duration, x = 'class', y = 'duration', color = 'class', color_discrete_sequence=px.colors.sequential.Viridis)
fig.update_layout(title_text='Avg duartion of each class', xaxis_title='Class', yaxis_title='Duration')
fig.show()

"""# **Insights**

**Air India** has the highest average flight duration among all airlines in the dataset, while **Indigo** has the lowest.

Among the **top 10** flights with the highest average duration, **UK-627** has the **highest** and **AI-721** has the **lowest** average duration.

Flights with **no stops** have the shortest average duration, while flights with **2 or more** stops have the longest average duration.

**Morning arrival time** has the **highest average flight duration**, while late night has the lowest. Night departure time has the highest average duration, while late night has the lowest.

**Hyderabad** has the longest average flight duration as a destination city, while **Kolkata** has the longest average flight duration as a source city.

**Delhi** has the shortest average duration for both destination and source cities.

**Economy** class has a lower average flight duration than Business class.

# ***Analysis according to Days Left***

**How does the price vary according to days left?**
"""

fig, ax = plt.subplots(figsize=(20, 8))
sns.lineplot(data=flights, x='days_left', y='price', ax=ax)
plt.show()

fig, ax = plt.subplots(figsize=(20, 8))
sns.lineplot(data=flights, x='days_left', y='price', hue = 'airline', ax=ax)

plt.show()

fig, ax = plt.subplots(figsize=(20, 8))
sns.lineplot(data=flights, x='days_left', y='price', hue = 'source_city', ax=ax)

plt.show()

fig, ax = plt.subplots(figsize=(20, 8))
sns.lineplot(data=flights, x='days_left', y='price', hue = 'destination_city', ax=ax)


plt.show()

fig, ax = plt.subplots(figsize=(20, 8))
sns.lineplot(data=flights, x='days_left', y='price', hue = 'class', ax=ax)

plt.show()

"""# **Insights**

Prices for flights are highest when there are only 1-3 days left for departure, but decrease as the days left for departure increase.

Air India and Vistara are the most expensive airlines, and prices decrease as the days left for departure increase.

Late night departure times have lower prices compared to other departure times, but prices for late night arrival times are higher than evening arrivals.

Prices increase for various factors such as airline, source city, departure time, stops, arrival time, and class when there are only 1-2 days left for departure, but decrease as the days left for departure increase.

# ***Analysis according to Price***
"""

fig = px.box(flights, x = 'airline', y = 'price', color = 'airline', color_discrete_sequence=px.colors.sequential.Viridis)

fig.show()

flight_price = flights.groupby('flight')['price'].mean().reset_index()
top10_flight_price = flight_price.nlargest(10, 'price')
fig = px.scatter(top10_flight_price, x='flight', y='price', color='flight', size = 'price', color_discrete_sequence=px.colors.sequential.Viridis)
fig.update_layout(title_text='Avg price of top 10 flights', xaxis_title='Flight', yaxis_title='Price')
fig.show()

fig = px.box(flights, x = 'source_city', y = 'price', color = 'source_city', color_discrete_sequence=px.colors.sequential.Viridis)
fig.update_layout(title_text='Price relation with different source city', xaxis_title='Source City', yaxis_title='Price')
fig.show()

fig = px.box(flights, x = 'departure_time', y = 'price', color = 'departure_time', color_discrete_sequence=px.colors.sequential.Viridis)
fig.update_layout(title_text='Price relation with different departure time', xaxis_title='Depature Time', yaxis_title='Price')
fig.show()

fig = px.box(flights, x = 'stops', y = 'price', color = 'stops', color_discrete_sequence=px.colors.sequential.Viridis)
fig.update_layout(title_text='Price relation with different stops', xaxis_title='Stops', yaxis_title='Price')
fig.show()

fig = px.box(flights, x = 'arrival_time', y = 'price', color = 'arrival_time', color_discrete_sequence=px.colors.sequential.Viridis)
fig.update_layout(title_text='Price relation with different arrival time', xaxis_title='Arrival Time', yaxis_title='Price')
fig.show()

fig = px.box(flights, x = 'destination_city', y = 'price', color = 'destination_city', color_discrete_sequence=px.colors.sequential.Viridis)
fig.update_layout(title_text='Price relation with different destination city', xaxis_title='Destination City', yaxis_title='Price')
fig.show()

fig = px.box(flights, x = 'class', y = 'price', color = 'class', color_discrete_sequence=px.colors.sequential.Viridis)
fig.update_layout(title_text='Price relation with different class', xaxis_title='Class', yaxis_title='Price')
fig.show()

"""# **Insights**

Air India and Vistara are the most expensive airlines, while the prices for other airlines are similar.

AI-433 has the highest average price among the top 10 flights, while UK-814 has the lowest.

Kolkata is the source city with the highest average prices, while Delhi has the lowest.

Morning departure times have the highest average prices, while late night departure times have the lowest.

Flights with 2 or more stops have the highest average prices, while flights with no stops have the lowest.

Evening arrival times have the highest average prices, while late night arrival times have the lowest.

All destination cities have similar average prices, except for Kolkata which has the highest prices and Delhi which has the lowest.

Business class tickets have significantly higher average prices compared to economy class tickets.

# ***Data Preprocessing***
"""

scaler = MinMaxScaler()
flights['duration'] = scaler.fit_transform(flights[['duration']])

"""Above i've used the min max scaler before encoding as this feature did not had a guassian distribution and is a contonous feature."""

le = LabelEncoder()
flights = flights.apply(lambda x: le.fit_transform(x) if x.dtype == 'object' else x)

"""Above i've used the label encoding on all categorical features so that i can feed them to my machine leaning algorithms later"""

X = flights.drop(['price'], axis = 1)
y = flights['price']
X_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.7, random_state = 42)

"""Here i've splitted the data above intro training and testing part. I've kept 70% of my data for training purpose"""

scaler = MinMaxScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

"""Above i've used scaling technique once again for better performance of my machine learning algorithm.

# ***Model Building***
"""

models = [LinearRegression(), DecisionTreeRegressor(), RandomForestRegressor()]

results = {'Model_Name': [], 'Mean_Absolute_Error_MAE': [], 'Mean_Absolute_Percentage_Error_MAPE': [],
            'Mean_Squared_Error_MSE': [], 'Root_Mean_Squared_Error_RMSE': [], 'R2_score': []}

for model in models:
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    mae = metrics.mean_absolute_error(y_test, y_pred)
    mape = np.mean(np.abs((y_test - y_pred) / y_test)) * 100
    mse = metrics.mean_squared_error(y_test, y_pred)
    rmse = np.sqrt(mse)
    r2 = metrics.r2_score(y_test, y_pred)

    results['Model_Name'].append(model.__class__.__name__)
    results['Mean_Absolute_Error_MAE'].append(mae)
    results['Mean_Absolute_Percentage_Error_MAPE'].append(mape)
    results['Mean_Squared_Error_MSE'].append(mse)
    results['Root_Mean_Squared_Error_RMSE'].append(rmse)
    results['R2_score'].append(r2)

Results = pd.DataFrame(results)

"""# ***Model Evaluation***"""

Results.head()

fig = px.bar(Results, x = 'Model_Name', y = 'Mean_Absolute_Error_MAE', color = 'Model_Name', color_discrete_sequence=px.colors.sequential.Viridis)
fig.update_layout(title_text='Model Name VS MAE', xaxis_title='Model_Name', yaxis_title='MAE')
fig.show()

fig = px.bar(Results, x = 'Model_Name', y = 'Mean_Absolute_Percentage_Error_MAPE', color = 'Model_Name', color_discrete_sequence=px.colors.sequential.Viridis)
fig.update_layout(title_text='Model VS MAE %', xaxis_title='Model_Name', yaxis_title='MAE %')
fig.show()

fig = px.bar(Results, x = 'Model_Name', y = 'Mean_Squared_Error_MSE', color = 'Model_Name', color_discrete_sequence=px.colors.sequential.Viridis)
fig.update_layout(title_text='Model Name VS MSE', xaxis_title='Model_Name', yaxis_title='MSE')
fig.show()

fig = px.bar(Results, x = 'Model_Name', y = 'Root_Mean_Squared_Error_RMSE', color = 'Model_Name', color_discrete_sequence=px.colors.sequential.Viridis)
fig.update_layout(title_text='Model Name VS RMSE', xaxis_title='Model_Name', yaxis_title='RMSE')
fig.show()

fig = px.bar(Results, x = 'Model_Name', y = 'R2_score', color = 'Model_Name', color_discrete_sequence=px.colors.sequential.Viridis)
fig.update_layout(title_text='Model Name VS R2_score', xaxis_title='Model_Name', yaxis_title='R Squared')
fig.show()

"""# ***Questions And their Answers from the Analysis:***

**a) Does price vary with Airlines?**

Yes it does.

**b) How is the price affected when tickets are bought in just 1 or 2 days before departure?**

It is increased if bought just 1-2 days earlier than departure.

**c) Does ticket price change based on the departure time and arrival time?**

Yes only in morning, evenig and late night basis.

**d) How the price changes with change in Source and Destination?**

It doesn't change too much except for the city of Kolkata, Delhi and Hyderabad.

**e) How does the ticket price vary between Economy and Business class?**

It varies too much as prices for business class are too high.

# ***CONCLUSION***
The dataset contains information on flight duration, days left for departure, price, airline, source city, departure and arrival times, number of stops, destination city, and travel class.

 Among the airlines, Vistara has the highest number of flights, while SpiceJet has the lowest. Delhi is the most popular source city, and Mumbai is the most popular destination city. Economy class is the most preferred travel class, and Air India and Vistara are the most expensive airlines. Flights with no stops have the shortest average duration, while flights with 2 or more stops have the longest. Morning departure times and evening arrival times have the highest average prices, while late night departure and arrival times have the lowest. Business class tickets are more expensive than economy class tickets.

  The Random Forest Regressor model performed the best with the least mean absolute error and highest r2 score.
"""